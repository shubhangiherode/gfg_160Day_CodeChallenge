que : Kadane's Algorithm
Given an integer array arr[]. You need to find the maximum sum of a subarray.

Examples:

Input: arr[] = [2, 3, -8, 7, -1, 2, 3]
Output: 11
Explanation: The subarray {7, -1, 2, 3} has the largest sum 11.
Input: arr[] = [-2, -4]
Output: -2
Explanation: The subarray {-2} has the largest sum -2.
Input: arr[] = [5, 4, 1, 7, 8]
Output: 25
Explanation: The subarray {5, 4, 1, 7, 8} has the largest sum 25.
Constraints:
1 ≤ arr.size() ≤ 105
-109 ≤ arr[i] ≤ 104

solution : class Solution {
  public:
    int maxSubarraySum(vector<int> &arr) {
        // Your code here
        long long max_sum = arr[0];
        long long current_sum = arr[0];
        
        for (int i=1; i< arr.size(); i++){
            current_sum = max((long long)arr[i],
            current_sum + arr[i]);
         max_sum =   max(max_sum,current_sum);
         
         
        }
        
        return max_sum;
        
        
    }
};

// Class that contains the logic to build the binary tree
/*
Definition of the Node class
class Node {
public:
    int data;
    Node *left;
    Node *right;

    Node(int x) {
        data = x;
        left = NULL;
        right = NULL;
    }
};
*/
class Solution {
  public:
    // Function to build the tree from given inorder and preorder traversals
    
    
    int preIndex = 0;
    unordered_map<int,int> inorderMap;
    
    Node* buildTreeHelper(vector<int>& preorder,
   vector<int>& inorder, int inStart , int inEnd ){
       if (inStart > inEnd) return NULL;
       
       int rootVal = preorder[preIndex++];
       Node* root = new Node (rootVal);
       
       
       int inIndex = inorderMap[rootVal];
       
       root->left = buildTreeHelper(preorder,inorder,
       inStart,inIndex-1);
       
       
       root->right = buildTreeHelper(preorder,inorder
       ,inIndex+1,inEnd);
       return root;
       
       
       
   }
    
    
    
    
    
    
    
    
    
    Node *buildTree(vector<int> &inorder, vector<int> &preorder) {
        // code here
        preIndex = 0;
        inorderMap.clear();
        
        for (int i=0; i < inorder.size(); i++) {
            inorderMap[inorder[i]] = i;
        }
        
        
        return buildTreeHelper(preorder,inorder,0,
        inorder.size() - 1);
        
        
    }
};








class Solution {
  public:
    vector<string> findPermutation(string &s) {
        // Code here there
    vector<string> ans;
    sort(s.begin(),s.end());
    vector<bool> used(s.size(),false);
    string path ="";
    backtrack(s,used,path,ans);
    return ans;
        
        
    }
    
    private:
    void backtrack(string &s, vector<bool>&used,string &path
    ,vector<string>&ans){
        
        if (path.size() == s.size()){
            ans.push_back(path);
            return;
        }
        for (int i=0 ; i < s.size(); i++){
            if (used[i]) continue;
            
            if (i > 0 && s[i] == s[ i - 1] && !used
            [i-1]) continue;
            
        
        
        
        
        
        
        
            used[i] = true;
            path.push_back(s[i]);
            
            backtrack(s,used,path,ans);
            
            path.pop_back();
            used[i] = false;
            
            
            
            
            
        }
        
        
        
    }
    
    
      
    
    
};







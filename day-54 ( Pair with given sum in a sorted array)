QUESTION :  You are given an integer target and an array arr[]. You have to find number of pairs in arr[] which sums up to target. It is given that the elements of the arr[] are in sorted order.
Note: pairs should have elements of distinct indexes. 

Examples :

Input: arr[] = [-1, 1, 5, 5, 7], target = 6
Output: 3
Explanation: There are 3 pairs which sum up to 6 : {1, 5}, {1, 5} and {-1, 7}.
Input: arr[] = [1, 1, 1, 1], target = 2
Output: 6
Explanation: There are 6 pairs which sum up to 2 : {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1} and {1, 1}.
Input: arr[] = [-1, 10, 10, 12, 15], target = 125
Output: 0
Explanation: There is no such pair which sums up to 125.
Constraints:
-105 <= target <=105
 2 <= arr.size() <= 105
-105 <= arr[i] <= 105






ANSWER : 
class Solution {
  public:
    int countPairs(vector<int> &arr, int target) {
        // Complete the function
        int left = 0, right = arr.size() -1;
        int count = 0;
         while (left < right){
             int sum = arr[left] + arr[right];
             
             if (sum == target){
                 if (arr[left] == arr[right]){
                     int n = right - left + 1;
                     count += (n * (n-1)) / 2;
                     break;
                 }else {
                     int l =1, r=1;
                     
                     while (left + 1 < right && arr[left]
                     == arr[left + 1]){
                         l++;
                         left++;
                     }
                 
                    
                    while (right - 1 > left && arr[right]
                     == arr[right - 1]){
                         r++;
                         right--;
                     
                 }
                 
                 count += (l * r);
                 left ++;
                 right--;
                 
                 
                 }
             }
             
             else if (sum < target){
                 left++;
             }else {
                 right--;
             }
            
         }
        
        
        return count;
        
        
        
    }
};









  
